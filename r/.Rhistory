a <- c("a", TRUE)
a
a <- c("a", 1.55)
a <- c(1.45, TRUE)
a <- c(1.45, 6L)
a <- c(c(1, 2), c(3, TRUE))
x <- 0:6
x.class()
x.class
class(x)
as.numeric(x)
as.character(x)
m = matrix(nrow = 2, ncol = 3)
m
m$dim
attributes(m)
m$dim
attributes(x)
attributes(a)
attributes(x)$dim
x = 1:6
dim(x) = c(2, 3)
x
x = as.numeric(x)
x
dim(x) = c(2, 3)
x
library(swirl)
swril()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
View(flags)
View(flags)
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_evct <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
lag_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flads_colors)
head(flags_colors)
head(flag_colors)
lappay(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, lengrt)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
flags(flags, uniquem, numeric(1))
vapplt(flags, uniquem, numeric(1))
vapply(flags, uniquem, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
play()
nxt()
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
rm(list = ls())
data(iris)
rm(list = ls())
data(iris)
temp <- function() {
m <- 2
w <- function() {
m <<- 3
}
w()
m
}
temp()
?inverse
?solve
X = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), 3, 3)
x
X
solve(X)
solve(t(X))
t(X)
solve(-t(X))
version
install.packages(c("assertthat", "BH", "curl", "haven", "httr", "jsonlite", "openssl", "R6", "Rcpp", "readr", "stringi", "stringr", "swirl"))
x = c(0, 0, 0)
leng(x)
length(x)
t = 1:29 / 29.
t
t(1)
t(20)
t[20]
setwd('F:\workspace\watson')
setwd('F:/workspace/watson')
source('grad.r')
setwd('r')
source('grad.r')
grad(f, c(0, 0, 0, 0, 0, 0))
library(numDeriv)
library('numDeriv')
install.packages('numDeriv')
library('numDeriv')
grad(f, c(0, 0, 0, 0, 0, 0))
f(c(0, 0, 0, 0, 0, 0))
f
print(f(c(0, 0, 0, 0, 0, 0)))
rep(1, 6)
print(f(rep(1, 6)))
grad(f, rep(1, 6))
grad(f, rep(1, 6))
print(f(rep(1, 6)))
source('grad.r')
print(f(rep(1, 6)))
grad(f, rep(1, 6))
hessian(f, rep(1, 6))
hessian(f, rep(0, 6))
grad(f, rep(0, 6))
grad(f, rep(0, 6))
source('grad.r')
grad(f, rep(0, 6))
grad(f, rep(0, 6))
source('grad.r')
grad(f, rep(0, 6))
grad(f, rep(1, 3))
f(rep(1, 3))
print(f(rep(1, 3)))
hessian(f, rep(1, 3))
hessian(f, rep(1, 3))
print(f(rep(1, 3)))
grad(f, rep(1, 3))
2 + 2;
2 + 2
grad(f, rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
print(gd(rep(1, 3)))
print(gd(rep(1, 3)))
gd(rep(1, 3))
print(gd(rep(1, 3)))
source('grad.r')
gd(rep(1, 3))
grad(f, rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
source('grad.r')
gd(rep(1, 3))
grad(f, rep(1, 3))
source('grad.r')
gd(rep(1, 3))
f(c(1, 1, 1))
print(f(c(1, 1, 1)))
gd(c(1, 1, 1, 2, 3, 4))
hessian(f, c(1, 1, 1))
grad(f, c(1, 1, 1))
grad(f, c(1, 1, 1, 4, 5, 6))
hessian(f, c(1, 1, 1, 4, 5, 6))
version()
version
